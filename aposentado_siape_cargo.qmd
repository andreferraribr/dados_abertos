---
title: "Aposentados Siape"
editor: visual
lang: "pt"
format:
  # docx: default
  html:
    code-fold: true
    code-summary: "mostrar o código"
    code-overflow: wrap
execute:
  warning: false
  message: false
---

```{r}
#| warning: false
#| message: false
#| error: false
library(readxl)
library(tidyverse)
library(janitor)
library(lubridate)
library(tidyverse)
library(purrr)
library(plotly)
library(knitr)
library(kableExtra)
library(deflateBR)
library(DescTools)
library(zoo)
library(stringr)
library(DT)
library(stringr)
library(scales)
library(ggthemes)

`%notin%` <- Negate(`%in%`)
myNumFmt <- as.fmt(digits=0, big.mark=".")
options(scipen = 999)
options(DT.options = list(pageLength = 10, fontSize = "70%", language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json')))

```

```{r}
#| label: setup-globals
#| include: false

source("globals.R")
```

## Introdução

Os dados sobre os aposentados estão em duas bases distintas: cadastro e remuneração. A tabela cadastro foca nos dados do aposentado (cpf, cargo, tipo de aposentadoria, data de início da aposentadoria...), enquanto a tabela remuneração traz detalhes sobre os valores da aposentadoria.

Nós vinculamos as duas tabelas para analisar os pagamentos das aposentadorias, por exemplo, por início do ano da aposentadoria e pelo cargo do aposentados.

## Tratamento dos dados

### Tabela Cadastro

```{r}
#| warning: false
#| message: false
#| error: false

aposentados_siape_cadastro <- read_delim("servidores/servidores/pos_2020/pensionistas_siape/202401_Cadastro_aposentado.csv", 
    delim = ";", escape_double = FALSE, locale = locale(date_names = "pt", 
        decimal_mark = ",", grouping_mark = ".", 
        encoding = "Latin1"), trim_ws = TRUE) %>% clean_names()%>% mutate(nome_id = str_c(str_sub(nome, start = 1L, end = 4L), " - ",id_servidor_portal))

aposentados_siape_cadastro <- aposentados_siape_cadastro
```

```{r}
#| warning: false
#| message: false
#| error: false

aposentados_siape_cadastro <- aposentados_siape_cadastro %>% mutate(map_df(aposentados_siape_cadastro %>% select(contains("data")), data_formatada))


aposentados_siape_cadastro <- aposentados_siape_cadastro%>% mutate( 
  tempo_setor_publico= lapso(data_aposentadoria ,data_diploma_ingresso_servicopublico ),
  tempo_aposentadoria =  lapso("2024-01-31", data_aposentadoria  ),
  tempo_cargo= lapso(data_aposentadoria ,data_ingresso_cargofuncao ),
  inicio_servico_publico = year(data_diploma_ingresso_servicopublico),
  inicio_orgao = year(data_ingresso_orgao),
  inicio_aposentadoria = year(data_aposentadoria ))



```

```{r}

#| warning: false
#| message: false
#| error: false
#| label: tbl-cargo_x_cargo_descricao
#| tbl-cap: Consolidação dos cargos







aposentados_siape_cadastro <- funcao_cargos(aposentados_siape_cadastro)

tabela_cargos <- data.frame(atributo = c("cargo","cargo_descricao"),
  quantidade= c(length(unique(aposentados_siape_cadastro$cargo)),length(unique(aposentados_siape_cadastro$descricao_cargo)))) 

tabela_cargos%>% kable(col.names = c("atributo","quantidade de registros únicos"), digits = 0, format.args = list(big.mark = ".", decimal.mark = ","))

```

#### Atributo nome_id

Criamos o atributo *nome_id* a partir da junção das quatro primeiras letras do nome do aposentado e o código ID para ter uma camada adicional de proteção ao dados pessoais dos beneficiários.

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-nome_id_03
#| tbl-cap: Novo atributo (nome_id)
aposentados_siape_cadastro %>% filter(!str_detect(nome,"aposentados")) %>% select( nome_id) %>% head() %>% kable()
```

```{r}

#| warning: false
#| message: false
#| error: false
#| label: tbl-nome_id_menor
#| tbl-cap: Novo atributo (nome_id para menores de 16 anos)
aposentados_siape_cadastro %>% filter(str_detect(nome,"aposentados")) %>% select(nome, id_servidor_portal, nome_id) %>% head() %>% kable()
```

```         
```

```         
```

### Tabela Remuneração

```{r}
aposentados_siape_remuneracao <- read_delim("servidores/servidores/pos_2020/pensionistas_siape/202401_Remuneracao_aposentado.csv", 
    delim = ";", escape_double = FALSE, locale = locale(date_names = "pt", 
        decimal_mark = ",", grouping_mark = ".", 
        encoding = "Latin1"), trim_ws = TRUE) %>% clean_names() %>% mutate( nome_id = str_c(str_sub(nome, start = 1L, end = 4L), " - ",id_servidor_portal))


aposentados_siape_remuneracao <- aposentados_siape_remuneracao%>% select(ano,mes,id_servidor_portal, nome, cpf, nome_id, remuneracao_basica_bruta_r,remuneracao_apos_deducoes_obrigatorias_r)

aposentados_siape_remuneracao <- aposentados_siape_remuneracao %>% filter(!startsWith(ano, "(*) Verbas indenizatórias são as parcelas indenizatórias"))
```

### Cuidados antes de associar as tabelas

#### Dados ausentes

Quando consultamos o Portal da Transparência é possível identificar o aposentado e o valor recebido.

Contudo, no caso dos aposentados sob sigilo, inexiste vínculo entre o aposentado (cadastro) e o valor da aposentadoria (remuneração). Logo, os aposentados sob sigilo não aparecem na base de dados da remuneração, inviabilizando qualquer consulta ao Portal da Transparência.

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-aposentados_ausente_base_remuneracao
#| tbl-cap: Aposentados ausentes na base de dados da remuneração

aposentados_siape_cadastro %>% filter(nome_id %in% 
    (setdiff(aposentados_siape_cadastro %>% select(nome_id),   aposentados_siape_remuneracao %>% select(nome_id)) )$nome_id) %>%
  group_by(nome_id) %>% count()  %>% kable()
```

#### Dados duplicados {#sec-dados_duplicados}

A tabela com os dados cadastrais tem `r  Format((nrow(aposentados_siape_cadastro)-nrow(aposentados_siape_remuneracao)), fmt = myNumFmt)` linhas a mais que a tabela com os dados de remuneração.

A diferença de `r  Format((nrow(aposentados_siape_cadastro)-nrow(aposentados_siape_remuneracao)), fmt = myNumFmt)` registros entre as bases de dados é resultado dos `r  Format(sum((aposentados_siape_cadastro %>% filter(nome_id != "Sigi - -11" ) %>% group_by(nome_id) %>% count() %>% group_by(n) %>% count() %>% mutate (repetidos = (n-1)*nn))$repetidos), fmt = myNumFmt)` aposentados que recebem mais de um benefício @tbl-dados_duplicados_base_cadastro e dos `r  nrow(aposentados_siape_cadastro %>% filter(nome_id %in% (setdiff(aposentados_siape_cadastro %>% select(nome_id),   aposentados_siape_remuneracao %>% select(nome_id)) )$nome_id) %>% group_by(nome_id))` registros que estão no cadastro, mas não estão na base de dados da remuneração. @tbl-aposentados_ausente_base_remuneracao

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-dados_duplicados_base_cadastro
#| tbl-cap: Dados duplicados na base de dados de cadastro
aposentados_siape_cadastro %>% filter(nome_id != "Sigi - -11" ) %>% group_by(nome_id) %>% count() %>% group_by(n) %>% count() %>% mutate (repetidos = (n-1)*nn) %>%adorn_totals() %>% kable(col.names = c("quantidade de benefícios","ocorrências", "repeditos"), format.args = list(big.mark = ".", decimal.mark = ","))


```

### Resultado da associação das tabelas: "tabela_aposentados_siape"

```{r}
tabela_aposentados_siape <- left_join(aposentados_siape_remuneracao ,aposentados_siape_cadastro  )





 tabela_aposentados_siape <- tabela_aposentados_siape %>% mutate( tempo_aposentadoria = time_length(difftime(today(),tabela_aposentados_siape$data_aposentadoria  ), "years"), proporcao = round(tempo_aposentadoria/(tempo_setor_publico+tempo_aposentadoria)*100,1), tempo_contribuicao =round( time_length( difftime (tabela_aposentados_siape$data_aposentadoria, tabela_aposentados_siape$data_diploma_ingresso_servicopublico), "years")))






```

A tabela mesclada (aposentados) também tem `r  Format((nrow(aposentados_siape_cadastro)-nrow(aposentados_siape_remuneracao)), fmt = myNumFmt)` que a base de dados da remuneração. A diferença é explicada da mesma maneira que a diferença entre a base de dados do cadastro e da remuneração. @sec-dados_duplicados

```         
```

```         
```

##### Comparando valores

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-df_valores_duplicados
#| tbl-cap: Comparando valores


valores <- c(
  
  as.numeric(tabela_aposentados_siape %>% select(nome_id, remuneracao_apos_deducoes_obrigatorias_r)  %>% group_by(nome_id) %>% summarise(valor = sum(remuneracao_apos_deducoes_obrigatorias_r, na.rm = TRUE)) %>% summarise(valor = sum(valor))),
  
 as.numeric(tabela_aposentados_siape %>% select(nome_id, remuneracao_apos_deducoes_obrigatorias_r) %>% unique() %>% group_by(nome_id) %>% summarise(valor = sum(remuneracao_apos_deducoes_obrigatorias_r, na.rm = TRUE)) %>% summarise(valor = sum(valor))),
 
  as.numeric(tabela_aposentados_siape %>% select(nome_id, remuneracao_apos_deducoes_obrigatorias_r)  %>% group_by(nome_id) %>% summarise(valor = sum(max(remuneracao_apos_deducoes_obrigatorias_r), na.rm = TRUE)) %>% summarise(valor = sum(valor))),
 
 sum(aposentados_siape_remuneracao$remuneracao_apos_deducoes_obrigatorias_r, na.rm = TRUE)
  
  )

fonte <- c("tabela aposentados", "aposentados_unique" , "aposentados_max","tabela remuneração" )

calculo <- data.frame(fonte,valores)

calculo %>% kable( col.names = c("fonte", "valor (R$)"),format.args = list(big.mark = ".", decimal.mark = ","))












```

## Análise dos dados

### Quantitativo por tipo de pensão

```{r}
#| warning: false
#| message: false
#| error: false
#| label: fig-aposentados_tipo_aposentadoria
#| fig-cap: Quantitativo por tipo de pensão
(tabela_aposentados_siape %>% group_by( tipo_aposentadoria)    %>% count() %>% arrange(desc(n)) ) %>% kable(col.names = c("tipo de aposentadoria","quantidade"), digits = 0, format.args = list(big.mark = ".", decimal.mark = ","))
```

```{r}
p <- ggplot(tabela_aposentados_siape %>% filter(tempo_setor_publico>1) %>% group_by(cargo) %>% summarise(trabalho_medio = round(mean(tempo_setor_publico,na.rm = TRUE),1), tempo_aposentadoria = round(mean(tempo_aposentadoria, na.rm = TRUE),1), q=n(), proporcao = mean(proporcao, na.rm= TRUE)) %>% filter(q>100)  %>% pivot_longer(cols = c(tempo_aposentadoria, trabalho_medio), names_to = "situacao", values_to = "tempo") , aes(y=fct_reorder( cargo, proporcao), x=tempo, fill = situacao )) +
    geom_col( position = "fill" )+
  scale_color_continuous() +
   theme(legend.position="none" ,axis.title.y = element_blank(),axis.title.x = element_blank(),axis.text.y=element_blank(),
        axis.ticks.y=element_blank() )
ggplotly(p)
```

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-valores_por_cargo
#| tbl-cap: Valores médios por cargo (R$)
datatable( tabela_aposentados_siape %>% group_by( cargo)    %>% summarise( valor_total = sum(remuneracao_basica_bruta_r),valor_medio = mean(remuneracao_basica_bruta_r), quantidade = n()) %>% arrange(desc(valor_total)) , colnames = c("cargo","valor total" ,"valor médio", "quantidade"), rownames = FALSE, options = list( 
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatRound(c("valor_medio", "valor_total", "quantidade"), 0, mark = ".", dec.mark = "," ) 
```

```{r}
df_plot_contribuicao <- tabela_aposentados_siape %>% filter(!is.na(inicio_servico_publico),!is.na(inicio_aposentadoria)) %>% group_by(inicio_servico_publico)%>% summarise( n =  n())%>% filter(!is.na(n))
df_plot_aposentadoria <- tabela_aposentados_siape %>% filter(!is.na(inicio_servico_publico),!is.na(inicio_aposentadoria) ) %>% group_by(inicio_aposentadoria) %>% summarise( n =  n())

df_plot_saldo <-  full_join ( df_plot_contribuicao,df_plot_aposentadoria , by = c( "inicio_servico_publico" = "inicio_aposentadoria"))



df_plot_saldo<- df_plot_saldo %>% rename( contribuintes = n.x)
df_plot_saldo<- df_plot_saldo %>% rename( aposentados = n.y )

df_plot_saldo[is.na(df_plot_saldo)] <- 0

df_plot_saldo <- df_plot_saldo %>% mutate(aposentados = - aposentados,  aposentados_acumulado = cumsum(aposentados),contribuintes_acumulado = cumsum(contribuintes), saldo =contribuintes_acumulado+aposentados_acumulado,  )

df_plot_saldo <-  df_plot_saldo %>% rename(ano = inicio_servico_publico)
```

### Contribuição x usufruto

```{r}
p <- ggplot(df_plot_saldo) + 
   geom_col(aes(ano ,  contribuintes, fill = "blue")) +
    geom_col( aes(ano,  aposentados, fill = "red")) +
  xlab("data") + 
  ylab("")+
  theme_clean  ()+ theme(legend.position="none")+ scale_fill_identity()
ggplotly(p)


```

### Saldo: contribuição x usufruto

```{r}
p <- ggplot(df_plot_saldo) + 
   geom_col(aes(ano ,  contribuintes_acumulado, fill = "blue")) +
    geom_col( aes(ano,  aposentados_acumulado, fill = "red")) +
   geom_line( aes(ano,  saldo)) +
  xlab("data") + 
  ylab("")+
  theme_clean  ()+ theme(legend.position="none")+ scale_fill_identity()
ggplotly(p)
```

### Frequência do tempo de contribuição

```{r}




p <- ggplot(tabela_aposentados_siape%>% filter(tempo_setor_publico>0.1)  %>% group_by(tempo_contribuicao)  %>% summarise(valor = sum(remuneracao_basica_bruta_r), n=n())  %>% arrange(desc(tempo_contribuicao))  ) + 
   geom_point(aes(n, tempo_contribuicao)) +
    xlab("quantidade") + 
  ylab("tempo de contribuição")+
  theme_clean  ()+ theme(legend.position="none")+ scale_color_discrete() +coord_flip()
ggplotly(p)



```

## Considerações finais

Pesquisas futuras poderiam investigar uma regra para agrupar os cargos.

Também seria interessante ter acesso à data de nascimento das pessoas.
