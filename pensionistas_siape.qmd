---
title: "Pensionistas Siape"
editor: visual
lang: "pt"
format:
  # docx: default
  html:
    code-fold: true
    code-summary: "mostrar o código"
    code-overflow: wrap
execute:
  warning: false
  message: false
---

```{r}
#| warning: false
#| message: false
library(readxl)
library(tidyverse)
library(janitor)
library(lubridate)
library(tidyverse)
library(purrr)
library(plotly)
library(knitr)
library(kableExtra)
library(deflateBR)
library(DescTools)
library(zoo)
library(stringr)
library(DT)
library(stringr)
library(scales)
library(ggthemes)

`%notin%` <- Negate(`%in%`)
myNumFmt <- as.fmt(digits=0, big.mark=".")
options(scipen = 999)
```

## Introdução

Os dados sobre os pensionistas estão em duas bases distintas: cadastro e remuneração. A tabela cadastro foca nos dados do instituidor da pensão (cpf, cargo, tipo da pensão, data de início da pensão...), enquanto a tabela remuneração traz detalhes sobre os valores dos benefícios.

Uma vez que ambas as tabelas contém os dados do beneficiários da pensão, nós vinculamos as duas tabelas a partir destes dados. Tomanos cuidados especiais com dados ausentes e duplicados.

Após associar as tabelas foi possível analisar os pagamentos das pensões, por exemplo, por início do ano da pensão, pelo cargo do instituidor da pensão e pelo tipo da pensão.

## Tratamento dos dados

### Tabela Cadastro

```{r}

pensionistas_siape_cadastro <- read_delim("servidores/servidores/pos_2020/pensionistas_siape/202401_Cadastro.csv", 
    delim = ";", escape_double = FALSE, locale = locale(date_names = "pt", 
        decimal_mark = ",", grouping_mark = ".", 
        encoding = "Latin1"), trim_ws = TRUE) %>% clean_names()%>% mutate(nome_id = str_c(str_sub(nome, start = 1L, end = 4L), " - ",id_servidor_portal), cpf_instituidor = paste0(str_sub( cpf_instituidor_pensao,  start = 5L, end = -4L),"-",str_sub( nome_instituidor_pensao,   start = 1L, end = 5L)))
```

#### Atributo nome_id

Criamos o atributo *nome_id* a partir da junção das quatro primeiras letras do nome do beneficiário e o código ID para ter uma camada adicional de proteção ao dados pessoais dos beneficiários.

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-nome_id_03
#| tbl-cap: Novo atributo (nome_id)
pensionistas_siape_cadastro %>% filter(!str_detect(nome,"PENSIONISTA")) %>% select( nome_id) %>% head() %>% kable()
```

```{r}

#| warning: false
#| message: false
#| error: false
#| label: tbl-nome_id_menor
#| tbl-cap: Novo atributo (nome_id para menores de 16 anos)
pensionistas_siape_cadastro %>% filter(str_detect(nome,"PENSIONISTA")) %>% select(nome, id_servidor_portal, nome_id) %>% head() %>% kable()
```

#### Atributo cpf_instituidor

Criamos o atributo *cpf_instituidor* a partir da junção de parte do CPF e as cinco primeiras letras do nome do instituidor. Curiosamente, como veremos adiante @sec-sem_cpf, em alguns casos não o nome ou cpf do instituidor da pensão. Este atributo confere uma camada adicional de proteção aos dados dos instituidores de pensão.

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-cpf_instituidor
#| tbl-cap: Novo atributo (cpf_instituidor)
pensionistas_siape_cadastro %>% select(cpf_instituidor) %>% head() %>% kable()
```

#### Dados Sigilosos

A base retorna `r  Format(nrow(pensionistas_siape_cadastro %>% filter (nome_id == "Sigi - -11")), fmt = myNumFmt)` registros sigilosos nos quais estão ocultos, dentre outros, os nomes dos beneficiários. Quando o registro é sigiloso, são disponibilizados apenas o cpf e o nome do instituidor da pensão.

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-dados_sigilosos
#| tbl-cap: Dados sigilosos
pensionistas_siape_cadastro %>% filter (nome_id == "Sigi - -11") %>% select(nome, cpf, matricula, cpf_instituidor_pensao) %>% kable()


```

#### Sem CPF do instituidor da pensão {#sec-sem_cpf}

A base retorna `r  Format(nrow(pensionistas_siape_cadastro %>% filter(cpf_instituidor == "NA-Sem i")), fmt = myNumFmt)` registros sem dados para o nome ou cpf do instituidor da pensão.

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-cpf_instituidor_ausente_exemplo
#| tbl-cap: Ausência do CPF do instituidor da pensão (exemplo)
pensionistas_siape_cadastro %>% filter(nome_id == "ALAY - 311552361")%>% select( nome_id, tipo_pensao, data_inicio_pensao, cpf_instituidor)%>% kable()
```

#### Dados Sigilosos e Sem CPF do instituidor da pensão

Felizmente há `r nrow( pensionistas_siape_cadastro %>%  filter(cpf_instituidor == "NA-Sem i",nome_id == "Sigi - -11" ))` registros que simultameamente sejam sigilosos e não tenham os dados do instituidor da pensão (CPF e nome).

#### Instituidores únicos de múltiplos benefícios

A base de dados cadastro retorna situações nas quais multiplos benefícios são concedidos a partir de um único instituidor de pensão. Por exemplo, a partir do instituidor 028.477-MARIO foram concedidos três benefícios (dois para a ELIA - 310606226 e um para a CIRL - 312337319) provenientes de três cargos distintos (médico, professor e sargento).

```{r}
pensionistas_siape_cadastro %>% filter(cpf_instituidor == "028.477-MARIO" )%>%  select(cpf_instituidor, descricao_cargo_instituidor_pensao, nome_id,  tipo_pensao)   %>% arrange(desc(nome_id))  %>%  kable(col.names = c("instituidor da Pensão","cargo","beneficiário", "tipo"))
```

A @tbl-um_instituidor_multiplos_beneficiários_exemplo traz o detalhamento dos benefícios vinculados ao instituidor 686.107-JOSE. São nove benificiários associados a um único vínculo/cargo (Sargento).

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-um_instituidor_multiplos_beneficiários_exemplo
#| tbl-cap: Um instituidor de pensão com múltiplos beneficiários (exemplo)
pensionistas_siape_cadastro %>% filter(cpf_instituidor == "686.107-JOSE ") %>% select(cpf_instituidor,descricao_cargo_instituidor_pensao  ,tipo_pensao, data_inicio_pensao , nome_id) %>% arrange(parse_date_time(  data_inicio_pensao,"dmy"))%>% kable()


```

### Tabela Remuneração

```{r}
pensionistas_siape_remuneracao <- read_delim("servidores/servidores/pos_2020/pensionistas_siape/202401_Remuneracao.csv", 
    delim = ";", escape_double = FALSE, locale = locale(date_names = "pt", 
        decimal_mark = ",", grouping_mark = ".", 
        encoding = "Latin1"), trim_ws = TRUE) %>% clean_names() %>% mutate( nome_id = str_c(str_sub(nome, start = 1L, end = 4L), " - ",id_servidor_portal))
```

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-linha_observacao
#| tbl-cap: Linha de observação na base de dados
pensionistas_siape_remuneracao %>% filter(startsWith(ano, "(*) Verbas indenizatórias são as parcelas indenizatórias")) %>% group_by(ano) %>% count() %>% kable()


pensionistas_siape_remuneracao <- pensionistas_siape_remuneracao %>% filter(!startsWith(ano, "(*) Verbas indenizatórias são as parcelas indenizatórias"))
```

### Cuidados antes de associar as tabelas

#### Dados ausentes

Quando consultamos o Portal da Transparência é possível identificar o beneficiário e o valor recebido. @fig-portal_com_remuneracao

Contudo, no caso dos beneficiários sob sigilo, inexiste vínculo entre o instituidor da pensão (cadastro) e o beneficiário (remuneração). Logo, os beneficiários sob sigilo não aparecem na base de dados da remuneração, inviabilizando qualquer consulta ao Portal da Transparência.

Além dos dados sigilosos, há dois beneficiários registrados na tabela cadastro que não constam na tabela remuneração. Consultamos o Portal da Transparência e localizamos os beneficiários. Todavia, as pesquisas retornaram apenas os dados cadastrais e não trouxeram a informação de pagamento. @fig-portal_sem_remuneracao_01 @fig-portal_sem_remuneracao_02

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-beneficiario_ausente_base_remuneracao
#| tbl-cap: Beneficiários ausentes na base de dados da remuneração

pensionistas_siape_cadastro %>% filter(nome_id %in% 
    (setdiff(pensionistas_siape_cadastro %>% select(nome_id),   pensionistas_siape_remuneracao %>% select(nome_id)) )$nome_id) %>%
  group_by(nome_id) %>% count() %>% adorn_totals() %>% kable()
```

![Portal da Transparência: remuneração civil](servidores/servidores/remuneracao.png){#fig-portal_com_remuneracao}

![Portal da Transparência: sem remuneração](servidores/servidores/ausente_01.png){#fig-portal_sem_remuneracao_01}

![Portal da Transparência: sem remuneração](servidores/servidores/ausente_02.png){#fig-portal_sem_remuneracao_02}

#### Dados duplicados {#sec-dados_duplicados}

A tabela com os dados cadastrais tem `r  Format((nrow(pensionistas_siape_cadastro)-nrow(pensionistas_siape_remuneracao)), fmt = myNumFmt)` linhas a mais que a tabela com os dados de remuneração.

A diferença de `r  Format((nrow(pensionistas_siape_cadastro)-nrow(pensionistas_siape_remuneracao)), fmt = myNumFmt)` registros entre as bases de dados é resultado dos `r  Format(sum((pensionistas_siape_cadastro %>% filter(nome_id != "Sigi - -11" ) %>% group_by(nome_id) %>% count() %>% group_by(n) %>% count() %>% mutate (repetidos = (n-1)*nn))$repetidos), fmt = myNumFmt)` beneficiários que recebem mais de um benefício @tbl-dados_duplicados_base_cadastro e dos `r  nrow(pensionistas_siape_cadastro %>% filter(nome_id %in% (setdiff(pensionistas_siape_cadastro %>% select(nome_id),   pensionistas_siape_remuneracao %>% select(nome_id)) )$nome_id) %>% group_by(nome_id))` registros que estão no cadastro, mas não estão na base de dados da remuneração. @tbl-beneficiario_ausente_base_remuneracao

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-dados_duplicados_base_cadastro
#| tbl-cap: Dados duplicados na base de dados de cadastro
pensionistas_siape_cadastro %>% filter(nome_id != "Sigi - -11" ) %>% group_by(nome_id) %>% count() %>% group_by(n) %>% count() %>% mutate (repetidos = (n-1)*nn) %>%adorn_totals() %>% kable(col.names = c("quantidade de benefícios","ocorrências", "repeditos"), format.args = list(big.mark = ".", decimal.mark = ","))


```

### Resultado da associação das tabelas: "tabela_pensionista_siape"

```{r}
tabela_pensionista_siape <- left_join(pensionistas_siape_remuneracao %>% select(ano,mes,id_servidor_portal, nome, cpf, nome_id, remuneracao_apos_deducoes_obrigatorias_r),pensionistas_siape_cadastro )




tabela_pensionista_siape <- tabela_pensionista_siape %>% mutate(inicio = year(parse_date_time(data_inicio_pensao,"dmy")))


```

A tabela mesclada (pensionistas) também tem `r  Format((nrow(pensionistas_siape_cadastro)-nrow(pensionistas_siape_remuneracao)), fmt = myNumFmt)` que a base de dados da remuneração. A diferença é explicada da mesma maneira que a diferença entre a base de dados do cadastro e da remuneração. @sec-dados_duplicados

#### Três benefícios para um beneficiário

```{r}
multiplos <- tabela_pensionista_siape%>% group_by(nome_id) %>% count() %>% filter(n>1)

#| warning: false
#| message: false
#| error: false
#| label: tbl-tres_beneficios
#| tbl-cap: Beneficiários com três benefícios
tabela_pensionista_siape %>% filter( nome_id %in% (multiplos%>% filter(n==3))$nome_id) %>% group_by(nome_id, descricao_cargo_instituidor_pensao) %>% count() %>% kable()
```

#### Dados duplicados - possíveis impactos

Devemos tomar cuidado ao fazer analises envolvendo o cargo do instituidor de pensão. Atenção especial para os cargos de médico e professor, pois estes cargos permitem o acúmulo de benefícios. A @tbl-dados_duplicados_impacto_cargo apresenta as possíveis duplicações na base de dados, por exemplo, quando o instituidor da pensão tem um cargo de médico e outro de professor, ou tem dois cargos de médico (um com 40h e outro com 20h).

Não mergulhei para mapear todos os possíveis impactos, mas a @tbl-dados_duplicados_impacto_cargo permite identificar que desafio está concentrado nos cargos de médico e professor.

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-dados_duplicados_impacto_cargo
#| tbl-cap: Dados duplicados - possíveis impactos
 
left_join( tabela_pensionista_siape  %>% group_by(nome_id, descricao_cargo_instituidor_pensao) %>% count() %>% group_by(descricao_cargo_instituidor_pensao) %>% count()%>% arrange(desc(n)) %>% head(10),tabela_pensionista_siape %>% filter(nome_id %in% multiplos$nome_id) %>% group_by(nome_id, descricao_cargo_instituidor_pensao) %>% count() %>% group_by(descricao_cargo_instituidor_pensao) %>% count()%>% arrange(desc(n)) , by = ("descricao_cargo_instituidor_pensao"))%>% mutate (percentual = n.y/n.x*100)%>% kable(col.names = c("cargo","total","possíveis duplicações", "percentual de possíveis duplicações"),digits = 1, format.args = list(big.mark = ".", decimal.mark = ","))
```

#### Evitar duplicar valores da remuneração

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-valores_duplicados
#| tbl-cap: Valores duplicados
tabela_pensionista_siape %>% filter(nome_id %in% c("ALDA - 312278709"))  %>% select(nome_id, cpf_instituidor, remuneracao_apos_deducoes_obrigatorias_r) %>% kable(col.names = c("nome_id", "instituidor","remuneração (R$)"), format.args = list(big.mark = ".", decimal.mark = ",")) 
```

##### unique()

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-unique_valores_duplicados
#| tbl-cap: unique() para evitar valores duplicados
tabela_pensionista_siape %>% filter(nome_id %in% c("ALDA - 312278709"))  %>% select(nome_id,  remuneracao_apos_deducoes_obrigatorias_r) %>% unique() %>% kable(col.names = c("nome_id", "remuneração (R$)"), format.args = list(big.mark = ".", decimal.mark = ",")) 
```

##### max()

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-max_valores_duplicados
#| tbl-cap: max() para evitar valores duplicados
tabela_pensionista_siape %>% filter(nome_id %in% c("ALDA - 312278709"))  %>% group_by(nome_id) %>% summarise(valor = sum(max(remuneracao_apos_deducoes_obrigatorias_r)))%>% kable(col.names = c("nome_id", "remuneração (R$)"), format.args = list(big.mark = ".", decimal.mark = ","))
```

##### Comparando valores

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-df_valores_duplicados
#| tbl-cap: Comparando valores


valores <- c(
  
  as.numeric(tabela_pensionista_siape %>% select(nome_id, remuneracao_apos_deducoes_obrigatorias_r)  %>% group_by(nome_id) %>% summarise(valor = sum(remuneracao_apos_deducoes_obrigatorias_r, na.rm = TRUE)) %>% summarise(valor = sum(valor))),
  
 as.numeric(tabela_pensionista_siape %>% select(nome_id, remuneracao_apos_deducoes_obrigatorias_r) %>% unique() %>% group_by(nome_id) %>% summarise(valor = sum(remuneracao_apos_deducoes_obrigatorias_r, na.rm = TRUE)) %>% summarise(valor = sum(valor))),
 
  as.numeric(tabela_pensionista_siape %>% select(nome_id, remuneracao_apos_deducoes_obrigatorias_r)  %>% group_by(nome_id) %>% summarise(valor = sum(max(remuneracao_apos_deducoes_obrigatorias_r), na.rm = TRUE)) %>% summarise(valor = sum(valor))),
 
 sum(pensionistas_siape_remuneracao$remuneracao_apos_deducoes_obrigatorias_r, na.rm = TRUE)
  
  )

fonte <- c("tabela pensionista", "pensionista_unique" , "pensionista_max","tabela remuneração" )

calculo <- data.frame(fonte,valores)

calculo %>% kable( col.names = c("fonte", "valor (R$)"),format.args = list(big.mark = ".", decimal.mark = ","))












```

## Análise dos dados

### Maiores benefícios

```{r}

#| warning: false
#| message: false
#| error: false
#| label: tbl-maiores_remuneracoes
#| tbl-cap: Maiores remunerações no mês


tabela_pensionista_siape  %>% group_by(  nome_id) %>% summarise(valor = max((remuneracao_apos_deducoes_obrigatorias_r))) %>% arrange(desc(valor)) %>% head() %>% kable(col.names = c("benficiário", "valor (R$)"), format.args = list(big.mark = ".", decimal.mark = ","))
```

![Portal da Transparência: maiores remunerações](servidores/servidores/top_benficio.png){#fig-top_remuneracao}

### Valores e quantidade de beneficiários

```{r}

df_plot <- (tabela_pensionista_siape %>%  group_by(nome_id, inicio) %>% summarise(valor = max(remuneracao_apos_deducoes_obrigatorias_r), n=n()) %>% group_by(inicio) %>% summarise(valor = sum(valor), n =sum(n)) %>% mutate(valor_acumulado= cumsum(valor), quantitativo_acumulado = cumsum(n)))





```

### Benefício recebido por ano de início da pensão (valor acumulado)

```{r}
#| warning: false
#| message: false
#| error: false
#| label: fig-beneficio_ano_inclusao_acumulado
#| fig-cap: Benefício recebido por ano de início da pensão (valor acumulado em R$)

p <- ggplot(df_plot, aes(x=inicio, y=valor_acumulado, label= Format(valor_acumulado, fmt = myNumFmt))) +
    geom_line()   +
   theme(legend.position="none", panel.grid.major.y = element_line(color = "grey") ,axis.title.y = element_blank(),axis.title.x = element_blank()) +scale_y_continuous(labels = label_number( big.mark = "."))

ggplotly(p)  
```

### Benefício recebido por ano de início da pensão

```{r}
#| warning: false
#| message: false
#| error: false
#| label: fig-beneficio_ano_inclusao
#| fig-cap: Benefício recebido por ano de início da pensão (valor em R$)
p <- ggplot(df_plot, aes(x=inicio, y=valor, label= Format(valor, fmt = myNumFmt))) +
    geom_line()   +
   theme(legend.position="none", panel.grid.major.y = element_line(color = "grey") ,axis.title.y = element_blank(),axis.title.x = element_blank()) +scale_y_continuous(labels = label_number( big.mark = "."))

ggplotly(p)  
```

### Quantitativo de pensionistas por ano de início da pensão (acumulado)

```{r}
#| warning: false
#| message: false
#| error: false
#| label: fig-pensionista_ano_inclusao_acumulado
#| fig-cap: Quantitativo de pensionistas por ano de início da pensão (acumulado)
p <- ggplot(df_plot, aes(x=inicio, y=quantitativo_acumulado, label= Format(quantitativo_acumulado, fmt = myNumFmt))) +
    geom_line()   +
   theme(legend.position="none", panel.grid.major.y = element_line(color = "grey") ,axis.title.y = element_blank(),axis.title.x = element_blank()) +scale_y_continuous(labels = label_number( big.mark = "."))

ggplotly(p) 
```

### Quantitativo de pensionistas por ano de início da pensão

```{r}
#| warning: false
#| message: false
#| error: false
#| label: fig-pensionista_ano_inclusao
#| fig-cap: Quantitativo de pensionistas por ano de início da pensão
p <- ggplot(df_plot, aes(x=inicio, y=n, label= Format(n, fmt = myNumFmt))) +
    geom_line()   +
   theme(legend.position="none", panel.grid.major.y = element_line(color = "grey") ,axis.title.y = element_blank(),axis.title.x = element_blank()) +scale_y_continuous(labels = label_number( big.mark = "."))

ggplotly(p) 
```

### Quantitativo por tipo de pensão

```{r}
#| warning: false
#| message: false
#| error: false
#| label: fig-pensionista_tipo_pensao
#| fig-cap: Quantitativo por tipo de pensão
p <- ggplot(tabela_pensionista_siape %>% group_by( tipo_pensao)    %>% count() , aes(x=n, y=fct_reorder( tipo_pensao,n ))) +
    geom_col(aes(fill = -n), stat = "identity") +
  scale_color_continuous() +
   theme(legend.position="none" ,axis.title.y = element_blank(),axis.title.x = element_blank())
ggplotly(p)
```

### Quantitativo de pensionistas, por tipo e por ano de início da pensão

```{r}
#| warning: false
#| message: false
#| error: false
#| label: fig-pensionista_tipo_ano
#| fig-cap: Quantitativo de pensionistas, por tipo e por ano de início da pensão

p <- ggplot(tabela_pensionista_siape %>%   group_by(  inicio, tipo_pensao)    %>% count(), aes(x=inicio, y=n,colour=tipo_pensao ,label= Format(n, fmt = myNumFmt))) +
    geom_line()   +
   theme(legend.position="none", panel.grid.major.y = element_line(color = "grey") ,axis.title.y = element_blank(),axis.title.x = element_blank()) +scale_y_continuous(labels = label_number( big.mark = "."))

ggplotly(p)
```

### Maiores valores por cargo do instituidor da pensão

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-maiores_valores_por_cargo
#| tbl-cap: Maiores valores por cargo do instituidor da pensão
tabela_pensionista_siape %>% group_by( descricao_cargo_instituidor_pensao)    %>% summarise(valor = sum(remuneracao_apos_deducoes_obrigatorias_r)) %>% arrange(desc(valor)) %>% head(10)%>% kable(col.names = c("Cargo do instituidor da pensão","Valor total dos benefícios pagos aos dependentes (R$)"), digits = 0, format.args = list(big.mark = ".", decimal.mark = ","))






```

### Maiores valores médios por cargo do instituidor da pensão

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-maiores_valores_medios_por_cargo
#| tbl-cap: Maiores valores médios por cargo do instituidor da pensão (R$)
tabela_pensionista_siape %>% group_by( descricao_cargo_instituidor_pensao)    %>% summarise(valor = mean(remuneracao_apos_deducoes_obrigatorias_r)) %>% arrange(desc(valor)) %>% head(10) %>% kable( col.names = c("Cargo do instituidor da pensão","Valor médio do benefício a ser dividido entre os beneficiários (R$)"),digits = 0,format.args = list(big.mark = ".", decimal.mark = ","))
```

### Menores valores médios por cargo do instituidor da pensão

```{r}
#| warning: false
#| message: false
#| error: false
#| label: tbl-menores_valores_medios_por_cargo
#| tbl-cap: Menores valores médios por cargo do instituidor da pensão (R$)
tabela_pensionista_siape %>% group_by( descricao_cargo_instituidor_pensao)    %>% summarise(valor = mean(remuneracao_apos_deducoes_obrigatorias_r)) %>% arrange(desc(valor)) %>% tail(10) %>% kable(col.names = c("Cargo do instituidor da pensão","Valor médio do benefício a ser dividido entre os beneficiários (R$)"), digits = 0,format.args = list(big.mark = ".", decimal.mark = ","))
```

## Considerações finais

Pesquisas futuras podem investigar:

1.  os motivos para os picos ocorridos em 1980 e 2004 na concessão de benefícios para filhos. @fig-pensionista_tipo_pensao

2.  os motivos para dois beneficiários constarem na tabela cadastro, mas estarem ausentes na tabela remuneração. @tbl-beneficiario_ausente_base_remuneracao

3.  qual é a defasagem temporal entre a solicitação e a concessão do benefício previdenciário.

4.  os motivos dos dados sigilosos na tabele cadastro

Seria interessante se a base de dados disponibilizasse:

1.  Data nascimento e óbito do instituidor da pensão

2.  Data de nascimento do beneficiário da pensão
