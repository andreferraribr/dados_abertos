---
title: "Servidores Siape"
editor: visual
lang: "pt"
format:
  # docx: default
  html:
    code-fold: true
    code-summary: "mostrar o código"
    code-overflow: wrap
execute:
  warning: false
  message: false
---

```{r bibliotecas}
#| warning: false
#| message: false
library(readxl)
library(tidyverse)
library(janitor)
library(lubridate)
library(tidyverse)
library(purrr)
library(plotly)
library(knitr)
library(kableExtra)
library(DescTools)
library(zoo)
library(stringr)
library(DT)
library(stringr)
library(scales)
library(ggthemes)

`%notin%` <- Negate(`%in%`)
myNumFmt <- as.fmt(digits=0, big.mark=".")
options(scipen = 999)

options(DT.options = list(pageLength = 10, fontSize = "70%", language = list(url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese.json')))
# https://rstudio.github.io/DT/004-i18n.html
# https://rstudio.github.io/DT/options.html
# %>% formatCurrency(c('A', 'C')) %>% formatPercentage('D', 2)%>% formatRound('E', 3)
```

## Introdução

Os dados sobre os servidores estão em duas bases distintas: cadastro e remuneração. Nos vinculamos as tabelas duas a partir das chaves id_servidor_portal, nome e cpf.

## Tratamento e visão geral dos dados

### Tabela Cadastro

Vamos ler a tabela com os dados cadastrais dos servidores e criar variáveis para gerenciar melhor os dados relacionados a datas.

```{r read_cadastro}

cadastro <- read_delim("servidores/servidores/pos_2020/pensionistas_siape/202401_Cadastro_servidor.csv", 
    delim = ";", escape_double = FALSE, locale = locale(date_names = "pt", 
        decimal_mark = ",", grouping_mark = ".", 
        encoding = "Latin1"), trim_ws = TRUE) %>% clean_names()%>% mutate(nome_id = str_c(str_sub(nome, start = 1L, end = 4L), " - ",id_servidor_portal))

cadastro <- cadastro%>% select(-matricula, -cod_uorg_lotacao ,-uorg_lotacao , -data_nomeacao_cargofuncao,-documento_ingresso_servicopublico,-diploma_ingresso_cargofuncao ,-diploma_ingresso_orgao ,-diploma_ingresso_servicopublico,-cod_tipo_vinculo,-tipo_vinculo,-cod_orgsup_lotacao,-orgsup_lotacao, -org_lotacao, -cod_org_lotacao )


```

#### Variáveis temporais

A tabela cadastro é rica em atributos relacionados a datas. Para facilitar a análise dos dados, nos criamos, dentre outos, um atributo identificar quanto tempo o servidor está no serviço público. Para tanto calculamos a diferença entre a data do ingresso do servidor no serviço público e a data da base de dados (31/jan/2024).

```{r cadastro_datas}

cadastro <- cadastro%>% mutate( data_ingresso_cargofuncao= parse_date_time(data_ingresso_cargofuncao,"dmy") , data_diploma_ingresso_servicopublico= parse_date_time(data_diploma_ingresso_servicopublico,"dmy"), data_ingresso_orgao = parse_date_time(data_ingresso_orgao,"dmy"),inicio_cargo = year(data_ingresso_cargofuncao), inicio_servico_publico = year(data_diploma_ingresso_servicopublico), inicio_orgao = year(data_ingresso_orgao),tempo_servico_publico= time_length(difftime("2024-01-31" ,data_diploma_ingresso_servicopublico ), "years"), tempo_cargo= time_length(difftime("2024-01-31" ,data_ingresso_cargofuncao ), "years") )
```

#### Atributo "cargo"

Criamos o atributo "cargo" para tentar consolidar todos os cargos registrados no atributo "descricao_cargo". Tentei agrupar por semelhança, mas não posso garantir a exatidão ou coerência da consolidação.

Alguns agrupamentos foram tranquilos, outros foram "chutes". Quando o cargo aparecia tanto no masculino quanto no feminino, optei pela descrição no masculino (recreadora x recreador). Em algumas situações, por falta de inspiração/conhecimento, deixei o cargo como descrito na base de dados (ex: CUX DE MANUTENCAO E SERV OPERACIONAIS)

A @tbl-cargo_x_cargo_descricao traz o resultado da consolidação, uma redução de quase 2.000 cargos.

```{r cadastro_cargos}
#| warning: false
#| message: false
#| error: false
#| label: tbl-cargo_x_cargo_descricao
#| tbl-cap: Consolidação dos cargos

cadastro <- cadastro %>%  mutate(descricao_01 = case_when(
startsWith(descricao_cargo, "ASG - ") ~ str_remove_all(descricao_cargo, "ASG - "),
startsWith(descricao_cargo, "ATA") ~ str_remove_all(descricao_cargo, "ATA "),
startsWith(descricao_cargo, "ATA-") ~ str_remove_all(descricao_cargo, "ATA-"),
startsWith(descricao_cargo, "ATA - ") ~ str_remove_all(descricao_cargo, "ATA - "),
startsWith(descricao_cargo, "ATA - TECNICO") ~  "TECNICO",
startsWith(descricao_cargo, "ATA - PROGRAMADOR") ~ "PROGRAMADOR",
startsWith(descricao_cargo, "ASO-") ~  str_remove_all(descricao_cargo, "ASO-"),
startsWith(descricao_cargo, "TNS - ") ~  str_remove_all(descricao_cargo, "TNS - "),
startsWith(descricao_cargo, "TNS-") ~  str_remove_all(descricao_cargo, "TNS-"),
startsWith(descricao_cargo, "TNS-") ~  str_remove_all(descricao_cargo, "TNS-"),
startsWith(descricao_cargo, "ASM-") ~  str_remove_all(descricao_cargo, "ASM-"),
startsWith(descricao_cargo, "ASM-") ~  str_remove_all(descricao_cargo, "ASM-"),
startsWith(descricao_cargo, "TEM ") ~  str_remove_all(descricao_cargo, "TEM "),
startsWith(descricao_cargo, "TEC ") ~  "TECNICO",
startsWith(descricao_cargo, "TNS ") ~  str_remove_all(descricao_cargo, "TNS "),
startsWith(descricao_cargo, "TIn ") ~  str_remove_all(descricao_cargo, "TIn "),
startsWith(descricao_cargo, "PROIND - ") ~  str_remove_all(descricao_cargo, "PROIND - "),
startsWith(descricao_cargo, "PROSAL - ") ~  str_remove_all(descricao_cargo, "PROSAL - "),
startsWith(descricao_cargo, "PROESU - ") ~  str_remove_all(descricao_cargo, "PROESU - "),
startsWith(descricao_cargo, "PROF ") ~  "PROFESSOR",
.default = descricao_cargo))


cadastro <- cadastro %>% mutate( descricao_01 =str_replace (  descricao_01, "-", " "), cargo_termo =word ( descricao_01 ,1))



cadastro <- cadastro %>% mutate(cargo = case_when(
  startsWith(descricao_cargo,   "AAD")~ "AUXILIAR",
  startsWith(descricao_cargo,   "AUX")~ "AUXILIAR",
  startsWith(descricao_cargo,   "AUG")~ "AUXILIAR",
  str_detect(descricao_cargo,   "AUXILIAR DE")~ "AUXILIAR",
  startsWith(descricao_cargo, "AG ")~ "AGENTE",
  startsWith(descricao_cargo, "PESQ")~ "PESQUISADOR",
  str_detect(descricao_cargo, "ANALI")~ "ANALISTA",
  
  str_detect(descricao_cargo, "TSE-")~ "TECNICO",
  str_detect(descricao_cargo, "EMPREGADO SERPRO")~ "EMPREGADO SERPRO",
  str_detect(descricao_cargo, "ENGENHEIRO-AREA")~ "ENGENHEIRO",
  str_detect(descricao_cargo, "FARMACEUTICO-")~ "FARMACEUTICO",
  str_detect(descricao_cargo, "FARMECEUTICO-")~ "FARMACEUTICO",
  str_detect(descricao_cargo, "ASSIST")~ "ASSISTENTE",
  str_detect(descricao_cargo, "ESP EM")~ "ESPECIALISTA",
  str_detect(descricao_cargo, "ESP REG")~ "ESPECIALISTA",
  str_detect(descricao_cargo, "ESP POL")~ "ESPECIALISTA",
  str_detect(descricao_cargo, "ATD-MS")~ "EQUIPE HOSPITALAR",
  startsWith(descricao_cargo, "TECNOL")~ "TECNOLOGO",
  startsWith(descricao_cargo, "ATA - TECNICO")~ "TECNICO",
  str_detect(descricao_cargo, "-TECNICO")~ "TECNICO",
  startsWith(descricao_cargo, "ATA - PROGRAMADOR")~ "PROGRAMADOR",
  startsWith(descricao_cargo, "MEDICINA")~ "MEDICO",
  startsWith(descricao_cargo, "ENFERMAGEM")~ "ENFERMEIRO",
  startsWith(descricao_cargo, "RELACOES PUBLICAS")~ "RELACOES PUBLICAS",
  startsWith(descricao_cargo, "ESPEC ")~ "ESPECIALISTA",
  startsWith(descricao_01, "PRIMEIRO")~ descricao_01,
  startsWith(descricao_01, "SEGUNDO")~ descricao_01,
  startsWith(descricao_01, "MINISTRO")~ descricao_cargo,
  startsWith(descricao_cargo, "OP ")~ "OPERADOR",
  startsWith(descricao_cargo, "ARTIF")~ "ARTIFICE",
  startsWith(descricao_cargo, "AUD FEDERAL")~ "AUDITOR",
  startsWith(descricao_cargo, "CUX")~ descricao_01,
  startsWith(descricao_01, "ASSIT")~ "ASSISTENTE",
  startsWith(descricao_cargo, "ATO -")~ "ASSISTENTE",
  startsWith(descricao_cargo, "CALDEREIRO")~ "CALDEIREIRO",
  startsWith(descricao_cargo, "CENOTECNICA")~ "CENOTECNICO",
  startsWith(descricao_cargo, "CINEGRAFIA")~ "CINEGRAFISTA",
  startsWith(descricao_cargo, "CONTRA REGRA")~ "CONTRA REGRA",
  startsWith(descricao_cargo, "CONTRA MESTRE")~ "CONTRA MESTRE",
  startsWith(descricao_cargo, "COMPRADORA")~ "COMPRADOR",
  startsWith(descricao_cargo, "PEDAGOGA")~ "PEDAGOGO",
  startsWith(descricao_cargo, "RECREADORA")~ "RECREADOR",
   startsWith(descricao_cargo, "PROD EXEC TV - RADIO E MIDIAS DIGITAIS")~ "PRODUTOR EXEC TV - RADIO E MIDIAS DIGITAIS",
  startsWith(descricao_cargo, "CONDUCAO")~ "MOTORISTA",
  startsWith(descricao_cargo, "PROFIS TEC ESPEC LINGUAGEM SINAIS")~ "ESPECIALISTA LINGUAGEM SINAIS",
  startsWith(descricao_cargo, "COORDEN")~ "COORDENADOR",
  startsWith(descricao_cargo, "PROFIS DE NIVEL OPERACIONAL")~ "APOIO",
  startsWith(descricao_cargo, "PROFIS DE EDUCACAO FISICA")~ "PROFISSIONAL DE EDUCACAO FISICA",
  startsWith(descricao_cargo, "OF ARTES GRAFICAS")~ "OF ARTES GRAFICAS",
  startsWith(descricao_cargo, "OF MANUTENCAO")~ "OF MANUTENCAO",
  startsWith(descricao_cargo, "COZINHEIRA")~ "COZINHEIRO",
  startsWith(descricao_cargo, "TERCEIRO")~ descricao_cargo,
  startsWith(descricao_01, "CONTRA REGRA")~ "CONTRA-REGRA",
  startsWith(descricao_cargo, "CONTRAMESTRE")~ "CONTRA-MESTRE",
  startsWith(descricao_cargo, "ECONOMO")~ "ECONOMISTA",
  startsWith(descricao_cargo, "T P ECONOMIA III")~ "ECONOMISTA",
  startsWith(descricao_cargo, "PROG APLICACOES III")~ "PROGRAMADOR",
  startsWith(descricao_cargo, "T ASS ADM")~ "TECNICO",
  startsWith(descricao_cargo, "OPER ESPECIALIZADO")~ "OPERADOR",
  startsWith(descricao_cargo, "MEDICO VETERINARIO")~ descricao_cargo,
  startsWith(descricao_cargo, "PROGAMADOR")~ "PROGRAMADOR",
  startsWith(descricao_cargo, "ESTATISTICA")~ "ESTATISTICO",
  startsWith(descricao_cargo, "PROF SERV OPERACIONAIS")~"SERVICOS OPERACIONAIS IV",
  startsWith(descricao_cargo, "CARGO EM EXTINCAO")~ "CARGO EM EXTINCAO",
  startsWith(descricao_cargo, "SALVA-VIDAS")~ "SALVA-VIDAS",
  startsWith(descricao_cargo, "FISC")~ "FISCAL",
  startsWith(descricao_cargo, "VICE-PRESIDENTE DA REPUBLICA")~ "VICE-PRESIDENTE DA REPUBLICA",
  startsWith(descricao_cargo, "PRESIDENTE DA REPUBLICA")~"PRESIDENTE DA REPUBLICA",
  startsWith(descricao_cargo, "JORNALISMO")~ "JORNALISTA",
  startsWith(descricao_cargo, "VISITADOR SANITARIO")~ "VISITADOR SANITARIO",
  startsWith(descricao_cargo, "MAQ AUXLIAR ")~ "AUXILIAR",
  startsWith(descricao_cargo, "INSP")~ "INSPETOR",
  startsWith(descricao_cargo, "MOCO DE MAQUINAS")~ "MOÇO DE MAQUINAS",
  startsWith(descricao_cargo, "ASO-ASSI")~ "ASSISTENTE",
  startsWith(descricao_cargo, "ENGENHARIA DE SOFTWARE")~ "ENGENHEIRO",
  str_detect(descricao_cargo, "ADMINISTRADOR") | startsWith(descricao_cargo, "ADMINISTRACAO " )~ "ADMINISTRADOR",
  descricao_cargo %in% c("MDT-MEDICO","MEDICO-AREA","MDT-MEDICO DO TRABALHO") ~ "MEDICO",
  .default = cargo_termo))


tabela_cargos <- data.frame(atributo = c("cargo","cargo_descricao"),
  quantidade= c(length(unique(cadastro$cargo)),length(unique(cadastro$descricao_cargo)))) 

tabela_cargos%>% kable(col.names = c("atributo","quantidade de registros únicos"), digits = 0, format.args = list(big.mark = ".", decimal.mark = ","))

```

#### Alterações nas nomenclaturas

Alterações nos nomes dos órgãos e/ou dos cargos dificultam análises temporais da base de dados. A @tbl-alteracao_nome_ministerio aponta que uma alteração no nome do Ministério do Trabalho gerou, para o mesmo servidor, duas datas diferentes para ingresso no órgão.

```{r alteracao_nome_orgao}
#| warning: false
#| message: false
#| error: false
#| label: tbl-alteracao_nome_ministerio
#| tbl-cap: Alteração no nome do ministério
# cadastro %>% filter(id_servidor_portal == "312662320", descricao_cargo == "AUDITOR FISCAL DO TRABALHO") %>% group_by(nome_id,descricao_cargo, org_exercicio, data_diploma_ingresso_servicopublico,data_ingresso_orgao,) %>% count() %>% arrange(data_ingresso_orgao) %>% select(-n) %>% kable()


datatable( cadastro %>% filter(id_servidor_portal == "312662320", descricao_cargo == "AUDITOR FISCAL DO TRABALHO") %>% group_by(nome_id,descricao_cargo, org_exercicio, data_diploma_ingresso_servicopublico,data_ingresso_orgao,) %>% count() %>% arrange(data_ingresso_orgao) %>% select(-n), colnames = c( "nome_id", "cargo", "órgão", "ingresso no serviço público", "ingresso no órgao"),  rownames = FALSE, options = list(
   autoWidth = TRUE, keys = TRUE
) ) %>% formatDate(c ("data_diploma_ingresso_servicopublico","data_ingresso_orgao"),  method="toLocaleDateString")
```

Ao analisar os dados cadastrais, tudo indica que uma alteração na nomenclatura do cargo afeta a data de ingresso no cargo. Por exemplo, em 2016 o cargo de analista de finanças e controle passou a ser chamado de auditor federal de finanças e controle. A @tbl-cgu_cargo indica que todos os servidores com o cargo auditor federal de finanças e controle assumiram o cargo a partir de 2016. A nossa suspeita é corroborada por uma pesquisa ao Portal da Transparência @fig-servidores_portal_mudanca_cargo indicando a alteração do cargo de um determinado servidor. Dessa forma, ficam prejudicadas as análises temporais envolvendo o atributo cargo.

```{r cgu_cargo_auditor}
#| warning: false
#| message: false
#| error: false
#| label: tbl-cgu_cargo
#| tbl-cap: CGU - quantitativo de auditores federais de finanças e controle


cadastro %>% filter(descricao_cargo == "AUDITOR FEDERAL DE FINANCAS E CONTROLE", org_exercicio == "Controladoria-Geral da União" ) %>% group_by(inicio_cargo) %>% arrange(desc(inicio_cargo)) %>% mutate(inicio_cargo = paste0(" ",inicio_cargo)) %>% count()  %>% kable(col.names = c("ano","ingressos"), digits = 0, format.args = list(big.mark = ".", decimal.mark = ","))  






```

![](servidores/servidores/historico_cargo.png){#fig-servidores_portal_mudanca_cargo}

#### Atenção com as datas

A base de dados cadastrais tem dezenas de milhares de dados ausentes para as datas de ingresso no serviço público, no órgão e no cargo.

```{r sem_data}
#| warning: false
#| message: false
#| error: false
#| label: tbl-NA_datas
#| tbl-cap: Dados incompletos para as datas de ingresso no serviço público, no órgão e no cargo.

apply(X = is.na(cadastro  %>% select(data_diploma_ingresso_servicopublico, data_ingresso_orgao, data_ingresso_cargofuncao)), MARGIN = 2, FUN = sum) %>% kable(col.names = "quantidade de NA" ,digits = 0, format.args = list(big.mark = ".", decimal.mark = ","))
```

Nós comparamos a data de ingresso no serviço público com a data de ingresso no órgão. Intuitivamente imaginamos que a data de ingresso no serviço público deveria ser igual ou preceder a data de ingresso no órgão. Contudo, não foi o que encontramos @tbl-ordem_ingresso_servico_cargo .

```{r ordem_ingresso_servico_cargo}
#| warning: false
#| message: false
#| error: false
#| label: tbl-ordem_ingresso_servico_cargo
#| tbl-cap: Ordem da data de ingresso serviço público x órgão.
cadastro  %>% select(data_diploma_ingresso_servicopublico, data_ingresso_orgao) %>% mutate(ordem = if_else(data_diploma_ingresso_servicopublico> data_ingresso_orgao, "ingresso no serviço público precede ingresso no órgão","ingresso no serviço público NÃO precede ingresso no órgão")) %>% group_by(ordem) %>% summarise(q= n()) %>% mutate(participacao = q/sum(q)*100) %>% adorn_totals()%>% kable(col.names = c("ordem", "quantidade", "participacão (%)"), digits = 0, format.args = list(big.mark = ".", decimal.mark = ","))

# https://thomasadventure.blog/posts/r-count-na/

```

### Tabela Remuneração

A tabela remuneração traz a remuneração básica bruta e a remuneração após deduções obrigatórias, optamos por utilizar apenas a remuneração básica bruta.

A remuneração bruta emgloba todos as remunerações do servidor. Por exemplo, se o servidor tem um cargo de professor e outro de médico, o valor da remuneração bruta sera a somas das remuneração. A base de dados não permite identificar, separadamente, qual foi a remureção de cada cargo. O mesmo ocorre quando um servidor tem uma função gratificada. Se o servidor tem um cargo de professor e uma função de diretor é impossível identificar quanto o servidor recebeu pela função de diretoria.

Sempre que o servidor tiver mais de uma fonte de remuneração não poderemos segregar o valor de cada uma das fontes de remuneração.

```{r read_remuneracao}
remuneracao <- read_delim("servidores/servidores/pos_2020/pensionistas_siape/202401_Remuneracao_servidor.csv", 
delim = ";", escape_double = FALSE, locale = locale(date_names = "pt", 
decimal_mark = ",", grouping_mark = ".", encoding = "Latin1"), trim_ws = TRUE) %>%
clean_names() %>%
mutate( nome_id = 
        str_c(str_sub(nome, start = 1L, end = 4L), " - ",id_servidor_portal))


remuneracao <- remuneracao%>% select(ano,mes,id_servidor_portal, nome, cpf, nome_id,remuneracao_basica_bruta_r)

remuneracao <- remuneracao %>% filter(!startsWith(ano, "(*) Verbas indenizatórias são as parcelas indenizatórias"))
```

### Cuidados ao associar as tabelas

#### Dados ausentes

Criamos a tabela "nao_inclusos" a partir dos servidores relacionados na base cadastro, mas ausentes na base remuneração.

Ao detalhar a tabela "nao_inclusos" por tipo de vínculo, é possível observar a prevalência do vínculo celetista/empregado e também a grande quantidade de registros marcados como sigilosos.

```{r df_nao_inclusos}
#| warning: false
#| message: false
#| error: false
#| label: tbl-servidores_ausente_base_remuneracao
#| tbl-cap: Servidores ausentes na base de dados da remuneração

nao_inclusos <- (setdiff(cadastro %>% select(nome_id),   remuneracao %>% select(nome_id)) )

# cadastro %>% filter(nome_id %in% nao_inclusos$nome_id)  %>% group_by(situacao_vinculo) %>% count() %>% arrange(desc(n)) %>% adorn_totals()  %>%  kable(col.names = c("vínculo", "quantidade"),format.args = list(big.mark = ".", decimal.mark = ","))

datatable( cadastro %>% filter(nome_id %in% nao_inclusos$nome_id)  %>% group_by(situacao_vinculo) %>% count() %>% adorn_totals() %>% arrange(desc(n)), colnames = c("vínculo", "quantidade"), rownames = FALSE, options = list( 
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatRound("n", 0, mark = ".", dec.mark = "," )

```

A seguir apresentamos em duas tabelas o detalhamento por órgão dos ervidores ausentes na tabela de remuneração. Na primeira A @tbl-servidores_ausente_base_remuneracao_por_orgao_exceto_sigilogo, trazemos todos servidores, exceto os com dados sigilosos. Na primeira A @tbl-servidores_ausente_base_remuneracao_por_orgao_apenas_sigilogo lista apenas os servidores com dados sigilosos.

Destaque para a Empresa Brasileira de Serviços Hospitalares dentre os servidores sem dados sigilosos.

```{r nao_incluso_exceto_sigiloso}
#| warning: false
#| message: false
#| error: false
#| label: tbl-servidores_ausente_base_remuneracao_por_orgao_exceto_sigilogo
#| tbl-cap: Servidores ausentes na base de dados da remuneração detalhado por órgão (exceto sigiloso)
 # cadastro %>% filter(nome_id %in% nao_inclusos$nome_id) %>% filter(situacao_vinculo != "Sigiloso")  %>% group_by(org_exercicio) %>% count() %>% arrange(desc(n)) %>% head()   %>%  kable(col.names = c("vínculo", "quantidade"),format.args = list(big.mark = ".", decimal.mark = ","))
 
 
 datatable(  cadastro %>% filter(nome_id %in% nao_inclusos$nome_id) %>% filter(situacao_vinculo != "Sigiloso")  %>% group_by( org_exercicio) %>% count()%>% adorn_totals() %>% arrange(desc(n)), colnames = c( "órgão", "quantidade"), rownames = FALSE, options = list(
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatRound("n", 0, mark = ".", dec.mark = "," )
```

Em relação aos dados sigilosos, destaque para os policiais federais (PF e PRF).

```{r  nao_incluso_sigiloso}
#| warning: false
#| message: false
#| error: false
#| label: tbl-servidores_ausente_base_remuneracao_por_orgao_apenas_sigilogo
#| tbl-cap: Servidores ausentes na base de dados da remuneração detalhado por órgão (apenas sigiloso)
# cadastro %>% filter(nome_id %in% nao_inclusos$nome_id) %>% filter(situacao_vinculo == "Sigiloso")  %>% group_by(org_exercicio) %>% count() %>% arrange(desc(n)) %>% head()   %>%  kable(col.names = c("vínculo", "quantidade"),format.args = list(big.mark = ".", decimal.mark = ","))


 
 datatable( cadastro %>% filter(nome_id %in% nao_inclusos$nome_id) %>% filter(situacao_vinculo == "Sigiloso")  %>% group_by(org_exercicio) %>% count() %>% adorn_totals()%>% arrange(desc(n)), colnames = c("órgão", "quantidade"), rownames = FALSE, options = list(
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatRound("n", 0, mark = ".", dec.mark = "," )
```

#### Dados duplicados {#sec-dados_duplicados}

A tabela cadastro pode retornar múltiplos registros para um único servidor. Por exemplo, na @tbl-servidor_duplicado, o servidor aparece em quatro registros: dois inválidos, um com cargo de técnico e outro com cargo de professor.

```{r servidor_duplicado}
#| warning: false
#| message: false
#| error: false
#| label: tbl-servidor_duplicado
#| tbl-cap: Servidor com múltiplos vínculos
# cadastro %>% filter(id_servidor_portal == "311102910") %>% group_by(nome_id,descricao_cargo, org_exercicio,data_ingresso_cargofuncao, data_ingresso_orgao) %>% count() %>% arrange(data_ingresso_cargofuncao) %>% select(-n) %>% kable()

datatable( cadastro %>% filter(id_servidor_portal == "311102910") %>% group_by(nome_id,descricao_cargo, org_exercicio,data_ingresso_cargofuncao, data_ingresso_orgao) %>% count() %>% arrange(data_ingresso_cargofuncao) %>% select(-n), colnames = c( "nome_id", "cargo", "órgão", "ingresso no cargo", "ingresso no órgao"),  rownames = FALSE, options = list(
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatDate(c ("data_ingresso_cargofuncao","data_ingresso_orgao"),  method="toLocaleDateString")
```

A @tbl-dados_duplicados traz um panorama geral dos vínculos duplicados.

```{r dados_duplicados}
#| warning: false
#| message: false
#| error: false
#| label: tbl-dados_duplicados
#| tbl-cap: Dados cadastrais, múltiplos vínculos
cadastro %>% filter(nome_id %notin% nao_inclusos$nome_id) %>% filter(nome != "Sigiloso") %>% group_by(nome_id) %>% count()  %>% group_by(n) %>% count()%>% mutate (repetidos = (n-1)*nn) %>% adorn_totals(where = c("row","col"))  %>%  kable(col.names = c("quantidade de vínculos", "ocorrências", "vínculos repeditos","total de vínculos"),format.args = list(big.mark = ".", decimal.mark = ","))



```

### Batimento das bases de dados cadastro e remuneração

A @tbl-diferenca aponta a diferença no número de registros entre os dados cadastrais e os dados da remuneração.

```{r diferenca}
#| warning: false
#| message: false
#| error: false
#| label: tbl-diferenca
#| tbl-cap: Diferença no número de registros cadastro x remuneração


vinculos <- c(
 as.numeric(nrow(cadastro)),
 as.numeric(nrow(remuneracao)),
 as.numeric(nrow(cadastro))-as.numeric(nrow(remuneracao))
 )

origem <- c("cadastro", "remuneração" , "diferença de registros" )

diferenca <- data.frame(origem,vinculos)

diferenca  %>% kable(col.names = 
              c("base de dados", "quantidade na quantidade de registros"),
              format.args = list(big.mark = ".", decimal.mark = ","))
```

A @tbl-batimento aponta que a diferença no número de registros das duas bases de dados é resultado dos dados duplicados @tbl-dados_duplicados e dos servidores ausentes na base remuneração @tbl-servidores_ausente_base_remuneracao

```{r batimento}
#| warning: false
#| message: false
#| error: false
#| label: tbl-batimento
#| tbl-cap: Explicando a diferença no número de registros cadastro x remuneração


vinculos <- c(
as.numeric(nrow(cadastro))-as.numeric(nrow(remuneracao)),

as.numeric(nrow(cadastro %>% filter(nome_id %in% nao_inclusos$nome_id))*-1),

as.numeric( sum((cadastro%>% filter(nome_id %notin% nao_inclusos$nome_id) %>% group_by(nome_id) %>% count() %>%
group_by(n) %>% count() %>% mutate (repetidos = (n-1)*nn))$repetidos)*-1)
   )

origem <- c("diferença entre a base cadastro e a base remuneração", "registors ausentes na base remuneração" , "registros duplicados na base cadastro" )

diferenca <- data.frame(origem,vinculos)

diferenca %>% adorn_totals()  %>% kable(col.names = c("base de dados", "quantidade na quantidade de registros"), format.args = list(big.mark = ".", decimal.mark = ","))
```

### Resultado da associação das tabelas: "servidores"

Vamos utilizar a função left_join( ) para mesclar as tabelas remuneracao e cadastro a partir das chaves id_servidor_portal, nome, cpf, nome_id.

```{r left_join}
servidores <- left_join(remuneracao ,cadastro  )


```

##### Comparando valores

Para evitar inconsistências na soma da remuneração devido a duplicidade de dados (vide @tbl-dados_duplicados) em algumas situações utilizamos as funções max( ) e unique ( ). A @tbl-df_valores_duplicados ilustra a aplicação das funções max( ) e unique( );

```{r valores_duplicados_comparacao}
#| warning: false
#| message: false
#| error: false
#| label: tbl-df_valores_duplicados
#| tbl-cap: Comparando valores


valores <- c(
  # "tabela servidores"
  as.numeric(servidores %>% select(nome_id, remuneracao_basica_bruta_r)  %>% group_by(nome_id) %>% summarise(valor = sum(remuneracao_basica_bruta_r, na.rm = TRUE)) %>% summarise(valor = sum(valor))),
  
  # "servidores_unique"
 as.numeric(servidores %>% select(nome_id, remuneracao_basica_bruta_r) %>% unique() %>% group_by(nome_id) %>% summarise(valor = sum(remuneracao_basica_bruta_r, na.rm = TRUE)) %>% summarise(valor = sum(valor))),
 
 # "servidores_max"
  as.numeric(servidores %>% select(nome_id, remuneracao_basica_bruta_r)  %>% group_by(nome_id) %>% summarise(valor = sum(max(remuneracao_basica_bruta_r), na.rm = TRUE)) %>% summarise(valor = sum(valor))),
 
 # "tabela remuneração"
 sum(remuneracao$remuneracao_basica_bruta_r, na.rm = TRUE)
  
  )

fonte <- c("tabela servidores", "servidores_unique" , "servidores_max","tabela remuneração" )

calculo <- data.frame(fonte,valores)

calculo %>% kable( col.names = c("fonte", "valor (R$)"),format.args = list(big.mark = ".", decimal.mark = ","))












```

A partir de agora podemos fazer análises com dados sobre a remuneração e com os dados cadastrais dos serivodres.

## Análise dos dados

### Quantitativo por órgão

```{r}
datatable(servidores %>% filter(nivel_funcao == "-1", orgsup_exercicio != "Sem informação" ) %>% group_by(org_exercicio, uorg_exercicio, cargo) %>% summarise( n = n()) %>% adorn_totals() %>% arrange(desc(n)), filter = 'top', colnames = c( "órgão","uorg" , "cargo", "quantitativo"),  rownames = FALSE, options = list(
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatRound (c("n"), mark = ".", dec.mark = ",", 0 )
```

### Tempo de serviço público detalhado por vínculo

```{r tempo_vinculo}
#| warning: false
#| message: false
#| error: false
#| label: tbl-vinculo_tempo
#| tbl-cap: Tempo de serviço público por tipo de vínculo

datatable( servidores %>% filter(tempo_servico_publico>1) %>% group_by(situacao_vinculo) %>% summarise(trabalho_medio = round(mean(tempo_servico_publico, na.rm = TRUE),1),maximo = round(max(tempo_servico_publico),1),  q=n())  %>% arrange(desc(trabalho_medio)), colnames = c( "vínculo", "tempo médio de serviço público", "tempo máximo de serviço público",  "quantidade"),  rownames = FALSE, options = list(
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatRound (c("trabalho_medio", "maximo","q"), mark = ".", dec.mark = ",", 0 )
```

```         
```

### Tempo de serviço público detalhado por cargo

```{r tempo_cargo}
#| warning: false
#| message: false
#| error: false
#| label: tbl-cargo_tempo
#| tbl-cap: Tempo de serviço público por cargo

datatable( servidores %>% filter(tempo_servico_publico>0, cargo %notin% c("Sem", "Inválido", "Sigiloso") ) %>% group_by(cargo) %>% summarise(trabalho_medio = round(mean(tempo_servico_publico, na.rm = TRUE),1),maximo = round(max(tempo_servico_publico),1),  q=n())  %>% arrange(desc(trabalho_medio)) , colnames = c( "cargo", "tempo médio de serviço público", "tempo máximo de serviço público",  "quantidade"),  rownames = FALSE, options = list(
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatRound (c("trabalho_medio", "maximo","q"), mark = ".", dec.mark = ",", 0 )
```

### Maior remuneração individual

```{r maior_individual}

#| warning: false
#| message: false
#| error: false
#| label: tbl-maiores_remuneracoes
#| tbl-cap: Maiores remunerações no mês


servidores  %>% group_by(  nome_id) %>% summarise(valor = max((remuneracao_basica_bruta_r))) %>% arrange(desc(valor)) %>% head() %>% kable(col.names = c("servidor", "valor (R$)"), format.args = list(big.mark = ".", decimal.mark = ","))
id_maior <-  as.character( servidores  %>% group_by(  id_servidor_portal) %>% summarise(valor = max((remuneracao_basica_bruta_r))) %>% arrange(desc(valor)) %>% head(1) %>% select(id_servidor_portal))
```

![](servidores/servidores/maior_remuneracao_servidor.png){#fig-maior_remuneracao_servidor}

### Cargos detalhados por quantitativo e remuneração (total, média e maior)

```{r remuneracao}
#| warning: false
#| message: false
#| error: false
#| label: tbl-todos
#| tbl-cap: todos valores médios por cargo do instituidor da pensão (R$)
datatable( servidores %>% filter(descricao_cargo %notin% c("Inválido","Sem informaç"))%>% group_by(cargo )    %>% summarise(q = n(),total =sum(remuneracao_basica_bruta_r), médio = mean(remuneracao_basica_bruta_r), maior = max(remuneracao_basica_bruta_r))  %>%  arrange(desc(q)) , colnames = c( "cargo","quantidade", "remuneração total", "remuneração média", "maior remuneração"), rownames = FALSE )%>% formatRound (c("q", "total", "médio","maior"), mark = ".", dec.mark = ",", 0 )

# servidores %>% filter(descricao_cargo %notin% c("Inválido","Sem informaç"))%>% group_by(cargo )    %>% summarise(q = n(),valor =sum(remuneracao_basica_bruta_r)) %>% mutate( medio = valor/q ) %>% arrange(desc(q)) %>% head(20)%>% kable(col.names = c("Cargo","Quantidade", "Valor", "Valor médio"), digits = 0, format.args = list(big.mark = ".", decimal.mark = ","))
```

#### Cargo professor

```{r professor}
datatable( servidores %>% filter(cargo == "PROFESSOR", descricao_cargo %notin% c("Inválido","Sem informaç"))%>% group_by(descricao_cargo )    %>% summarise(q = n(),total =sum(remuneracao_basica_bruta_r), médio = mean(remuneracao_basica_bruta_r), maior = max(remuneracao_basica_bruta_r))  %>%  arrange(desc(q))  , colnames = c( "cargo detalhado","quantidade", "remuneração total", "remuneração média", "maior remuneração"), rownames = FALSE )%>% formatRound (c("q", "total", "médio","maior"), mark = ".", dec.mark = ",", 0 )
```

#### Cargo médico

```{r medico}
datatable( servidores %>% filter(cargo == "MEDICO", descricao_cargo %notin% c("Inválido","Sem informaç"))%>% group_by(descricao_cargo )    %>% summarise(q = n(),total =sum(remuneracao_basica_bruta_r), médio = mean(remuneracao_basica_bruta_r), maior = max(remuneracao_basica_bruta_r))  %>%  arrange(desc(q)) , colnames = c( "cargo detalhado","quantidade", "remuneração total", "remuneração média", "maior remuneração"), rownames = FALSE )%>% formatRound (c("q", "total", "médio","maior"), mark = ".", dec.mark = ",", 0 )
```

#### Cargo analista

```{r analista}
datatable( servidores %>% filter(cargo == "ANALISTA", descricao_cargo %notin% c("Inválido","Sem informaç"))%>% group_by(descricao_cargo )    %>% summarise(q = n(),total =sum(remuneracao_basica_bruta_r), médio = mean(remuneracao_basica_bruta_r), maior = max(remuneracao_basica_bruta_r))  %>%  arrange(desc(q)), colnames = c( "cargo detalhado","quantidade", "remuneração total", "remuneração média", "maior remuneração"), rownames = FALSE )%>% formatRound (c("q", "total", "médio","maior"), mark = ".", dec.mark = ",", 0 )
```

### Função

```{r funcao_gratificada_orgao}
#| warning: false
#| message: false
#| error: false
#| label: tbl-funcao_gratificada
#| tbl-cap: Função Gratificada


datatable( servidores %>% filter(nivel_funcao != "-1") %>% group_by(  org_exercicio) %>% summarise( q=n())%>% adorn_totals()  %>% arrange(desc(q)) , colnames = c("órgão","quantidade"), rownames = FALSE, options = list(
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) ) %>% formatRound(c("q"), mark = ".", dec.mark = ",",0)
```

### Ministros

```{r ministros}
#| warning: false
#| message: false
#| error: false
#| label: tbl-ministros_tempo
#| tbl-cap: Ministros, tempo de serviço público e duração no cargo

datatable( servidores %>% filter( startsWith(cargo, "MINISTRO DE ESTADO")) %>% group_by(nome, org_exercicio  ) %>% summarise(tempo_servico_publico = round(tempo_servico_publico,1), tempo_cargo = round(tempo_cargo,1)), colnames = c("ministro", "órgão", "tempo no cargo (anos)", "tempo de serviço público (anos)"), rownames = FALSE, options = list(
  pageLength = 10,
  lengthMenu = c(10, 25,50), autoWidth = TRUE, keys = TRUE
) )
```

### Adminissões ao longo do tempo

```{r df_plot}
#https://bookdown.dongzhuoer.com/hadley/ggplot2-book/custom-annotations

df_plot <- servidores %>% mutate(ano = floor_date(data_diploma_ingresso_servicopublico, "year"))  %>% group_by(ano)  %>% summarise(valor = sum(remuneracao_basica_bruta_r), n=n()) %>% mutate (etiqueta = paste0(year(ano),": ", Format(n, fmt = myNumFmt)," ingressos"))%>% drop_na()  

presidentes <- read_excel("presidentes.xlsx", 
                          col_types = c("text","date", "date", "date", "text", "text"))  %>% mutate(cor = fct_reorder(cor, party), presidencia =  interval(start, end) , regra = paste0("ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('",start, "'),ymd('", end, "'))","~", "'", name, "',"))


df_plot_agregado <- servidores  %>% group_by( data_diploma_ingresso_servicopublico)  %>% summarise(valor = sum(remuneracao_basica_bruta_r), n=n())%>% drop_na() %>% mutate(presidente_partido = case_when(
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('1964-04-15'),ymd('1985-03-15'))~'Militares - Arena',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('1985-03-15'),ymd('1990-03-15'))~'Sarney - PMDB',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('1990-03-15'),ymd('1992-12-29'))~'Collor - PRN',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('1992-12-29'),ymd('1995-01-01'))~'Itamar - PMDB',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('1995-01-01'),ymd('2002-12-31'))~'FHC - PSDB',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('2003-01-01'),ymd('2010-12-31'))~'Lula - PT',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('2011-01-01'),ymd('2016-08-31'))~'Dilma - PT',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('2016-08-31'),ymd('2018-12-31'))~'Temer - PMDB',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('2019-01-01'),ymd('2022-12-31'))~'Bolsonaro - PL',
 ymd (data_diploma_ingresso_servicopublico) %within%  interval(ymd('2023-01-01'),ymd('2025-03-07'))~'Lula - PT'  ,
 .default = "Antes de 1964 - Antes de 1964")
 )

df_plot_agregado [(c("presidente", "partido"))] <- str_split_fixed(df_plot_agregado$presidente_partido, " - ",2)


```

 

```{r df_agregado}
df_plot_agregado%>% group_by(partido) %>% summarise(q = sum(n))%>% mutate(participacao = q/sum(q)*100) %>% arrange(desc(q)) %>% kable(digits = 1, format.args = list(big.mark = ".", decimal.mark = ","))
```

```{r plot_presidente }
#| warning: false
#| column: page

p <- ggplot(df_plot) + 
  geom_rect(
    aes(xmin = start , xmax = end , fill = cor), 
    ymin =0, ymax = max (df_plot$n)*1.4, alpha = 0.2, 
    data = presidentes
  )+
   scale_fill_manual(values = levels(presidentes$cor)) + 
  geom_vline(
    aes(xintercept = as.numeric(start)), 
    data = presidentes,
    colour = "grey50", alpha =0.2
  ) + 
  geom_text(
    aes(x = texto, y = max (df_plot$n)*1.3, label = name), 
    data = presidentes, 
    size = 3
  ) + 
   geom_col(aes(ano %m+% months (6),  n, label= paste0( etiqueta))) +
  xlab("data") + 
  ylab("servidores admitidos")+
  theme_clean  ()+ theme(legend.position="none")
ggplotly(p)
```

## Considerações finais

1.  Precisamos tormar cuidado com as análises temporais devido às alterações nas nomenclaturas dos cargos e/ou órgãos e também pela grande quatidade de dados ausentes para as datas de ingresso no serviço público, órgão e cargo. (@tbl-alteracao_nome_ministerio , @tbl-NA_datas)

2.  Trabalhamos com a remuneração bruta, logo desconsideramos o abate-teto, deduções, tributação... Atenção especial para os servidores com mais de um vínculo, pois, dependendo da organização dos dados, os valores podem vir dobrados.

3.  Seria interessante ter os códigos das uorgs para organizar melhor os dados.
